//
// Created by yzx66 on 2019/11/27.
//

#include "TestLab8.h"
#include "iostream"
#include "./question/QustionLab_8.h"
using namespace std;

QustionLab_8 qustionLab8;

void testShellSort();
void testQuickSort();
void testHeapSort();
void testMergeSort();

void TestLab8::testLab() {
     testShellSort();
    testQuickSort();
     testHeapSort();
     testMergeSort();
}

void testShellSort(){
    /**
     * 实现shell排序算法，并观察在采用不同的步长选取方法对排序过程中数据的比较和移动次数的影响。
        测试数据：数组元素分别为：
        第一组数据：
        （180,203,32,46,25,76,17,58,99,100,11,102,13,54,75,6,27,18,19,29,2,82）
        其余数据的规模应不少于第一组数。
     */
     cout<<"测试希尔排序 数据：180,203,32,46,25,76,17,58,99,100,11,102,13,54,75,6,27,18,19,29,2,82"<<endl;
     int data[]={180,203,32,46,25,76,17,58,99,100,11,102,13,54,75,6,27,18,19,29,2,82};
     qustionLab8.shellSort(data,22);
     cout<<"排序后：";
     for(int i=0;i<22;i++) cout<<data[i]<<" ";
     cout<<endl<<endl;
}

void testQuickSort(){
    /**
     * 以数组和二叉树形式动态演示堆排序算法的排序过程。
        测试数据：
        数组元素分别为：
        第一组数据：
        （106,213,325,446,579,654,721,870,917,510,21,632,73,14,815,316,412,18,619,720,21,808,923,25,26）
     */
    cout<<"测试快速排序 数据：106,213,325,446,579,654,721,870,917,510,21,632,73,14,815,316,412,18,619,720,21,808,923,25,26"<<endl;
    int data[]={106,213,325,446,579,654,721,870,917,510,21,632,73,14,815,316,412,18,619,720,21,808,923,25,26};
    qustionLab8.quickSort(data,25);
    cout<<"排序后：";
    for(int i=0;i<25;i++) cout<<data[i]<<" ";
    cout<<endl<<endl;
}

void testHeapSort(){
    /**
     * 以数组和二叉树形式动态演示堆排序算法的排序过程。
        测试数据：
        数组元素分别为：
        第一组数据：
        （106,213,325,446,579,654,721,870,917,510,21,632,73,14,815,316,412,18,619,720,21,808,923,25,26）
     */
    cout<<"测试堆排序 数据：106,213,325,446,579,654,721,870,917,510,21,632,73,14,815,316,412,18,619,720,21,808,923,25,26"<<endl;
    int data[]={106,213,325,446,579,654,721,870,917,510,21,632,73,14,815,316,412,18,619,720,21,808,923,25,26};
    qustionLab8.heapSort(data,25);
    cout<<"排序后：";
    for(int i=0;i<25;i++) cout<<data[i]<<" ";
    cout<<endl<<endl;
}

void testMergeSort(){
    /**
     * 利用二路归并方法进行排序。
        测试数据：
        数组元素分别为：
        第一组数据：
        ( 106,213,325,446,579,654,721,870,917,510,21,632,73,14,815,316,412,18,619,720,21,808,923,25,26  )
     */
    cout<<"测试归并排序 数据：106,213,325,446,579,654,721,870,917,510,21,632,73,14,815,316,412,18,619,720,21,808,923,25,26"<<endl;
    int data[]={106,213,325,446,579,654,721,870,917,510,21,632,73,14,815,316,412,18,619,720,21,808,923,25,26};
    qustionLab8.mergeSort(data,25);
    cout<<"排序后：";
    for(int i=0;i<25;i++) cout<<data[i]<<" ";
    cout<<endl<<endl;
}